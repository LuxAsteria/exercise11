hyperion cc

 def calculate(theta_0,alpha):
    theta=[theta_0]
    omega=[0]
    phi=[0]
    x=[1]
    y=[0]
    r=[1]
    v=[5]
    vx=[0]
    vy=[5]
    t=[0]
    delt=[0]
    dt=0.0001
    while t[-1]<16:
        omega_new=-3*GM/r[-1]**5*(x[-1]*sin(theta[-1])-y[-1]*cos(theta[-1]))*(x[-1]*cos(theta[-1])+y[-1]*sin(theta[-1]))*dt+omega[-1]
        delta=-3*GM/r[-1]**5*(x[-1]*sin(theta[-1])-y[-1]*cos(theta[-1]))*(x[-1]*cos(theta[-1])+y[-1]*sin(theta[-1]))*dt
        delt.append(delta)
        omega.append(omega_new)
        theta_new=omega[-1]*dt+theta[-1]
        while theta_new<-pi:
            theta_new+=2*pi
        while theta_new>pi:
            theta_new-=2*pi
        theta.append(theta_new)
        vx_new=vx[-1]-dt*(4*pi**2/r[-1]**3*(1+alpha/r[-1]**2)*x[-1])
        vy_new=vy[-1]-dt*(4*pi**2/r[-1]**3*(1+alpha/r[-1]**2)*y[-1])
        vx.append(vx_new)
        vy.append(vy_new)
        x_new=x[-1]+dt*vx[-1]
        y_new=y[-1]+dt*vy[-1]
        x.append(x_new)
        y.append(y_new)
        r_new=sqrt(x[-1]**2+y[-1]**2)
        r.append(r_new)
        t.append(t[-1]+dt)
    return theta,t,x,y,omega,delt

def delta_theta(theta_0,alpha):
    theta=calculate(theta_0,alpha)[0]
    t=calculate(theta_0,alpha)[1]
    delta_theta=[]
    for i in range(len(theta)):
        delta=abs(theta[i]-theta[i-1])
        delta_theta.append(delta)
    return delta_theta

delt=delta_theta(0.01,0.0001)
t=calculate(0.01,0.0001)[1]
theta=calculate(0.01,0.0001)[0]
omega=calculate(0.01,0.0001)[4]
fig=plt.figure()
plt.subplot(111)
plt.title('theta_0=0.01')
plt.plot(t,delt)
plt.ylim(0.0001,10)
plt.semilogy(t,delt)
plt.show()

theta2=calculate(0,0.0001)[0]
delt2=delta_theta(0,0.0001)
omega2=calculate(0,0.0001)[4]
plt.subplot(211)
plt.title('theta_0=0')
plt.plot(t,delt2)
plt.ylim(0.0001,10)
plt.semilogy(t,delt2)
plt.show()


 class three_body:
   def __init__(self):
       self.ms=1.989*pow(10,30)
       self.mj=1.90*pow(10,27)
       self.me=5.965*pow(10,10)
       self.mm=7.349*pow(10,22)
       mm,me,ms,mj=self.mm,self.me,self.ms,self.mj
       a_j=5.2
       a_e=3
       a_m=0.0257
       em=0.0549
       ej=0.0167
       ee=0.0489
       g=4*pi**2
       r1=a_e*(1+ee)
       r2=a_j*(1+ej)
       r3=r1+a_m*(1+em)
       v1=sqrt(g*(1-ee)/((a_e*(1+ee))))
       v3=sqrt(g/ms*me*(1-em)/((a_m*(1+em))))
       v2=sqrt(g*(1-ej)/((a_j*(1+ej))))
       self.re=[r1]
       self.rj=[r2]
       self.rm=[r3]
       self.ve=[v1]
       self.vj=[v2]
       self.vm=[v3]
       self.vex=[0]
       self.vey=[v1]
       self.vjx=[0]
       self.vjy=[v2]
       self.vmx=[0]
       self.vmy=[v3]
       self.xm=[r3]
       self.ym=[0]
       self.xe=[r1]
       self.ye=[0]
       self.xj=[r2]
       self.yj=[0]
       r12=abs(r1-r2)
       r23=abs(r3-r1)
       self.rem=[r23]
       self.rej=[r12]
       self.t=[0]
       self.dt=0.005

   def cac(self,k,alpha):
       ms,mj,me,t,dt,xj,yj,xe,ye,vex,vey,vjx,vjy,rej,re,rj,rm,xm,ym,vmx,vmy,rem,mm=self.ms,self.mj,self.me,self.t,self.dt,self.xj,self.yj,self.xe,self.ye,self.vex,self.vey,self.vjx,self.vjy,self.rej,self.re,self.rj,self.rm,self.xm,self.ym,self.vmx,self.vmy,self.rem,self.mm
       g=4*pi**2
       mj=k*mj
       while t[-1]<35:
           self.aesx=-g*xe[-1]/re[-1]**3*(1+alpha/re[-1]**2)
           self.aesy=-g*ye[-1]/re[-1]**3*(1+alpha/re[-1]**2)
           self.ajsx=-g*xj[-1]/rj[-1]**3*(1+alpha/rj[-1]**2)
           self.ajsy=-g*yj[-1]/rj[-1]**3*(1+alpha/rj[-1]**2)
           self.aejx=-g/ms*mj*(xe[-1]-xj[-1])/rej[-1]**3*(1+alpha/rej[-1]**2)
           self.aejy=-g/ms*mj*(ye[-1]-xj[-1])/rej[-1]**3*(1+alpha/rej[-1]**2)
           self.amsx=-g*xm[-1]/rm[-1]**3*(1+alpha/rm[-1]**2)
           self.amsy=-g*ym[-1]/rm[-1]**3*(1+alpha/rm[-1]**2)
           xme=xm[-1]-xe[-1]
           yme=ym[-1]-ye[-1]
           self.amex=-g/ms*me*xme/rem[-1]**3*(1+alpha/rem[-1]**2)
           self.amey=-g/ms*me*yme/rem[-1]**3*(1+alpha/rem[-1]**2)
           vex_n=vex[-1]+dt*self.aesx+dt*self.aejx-self.amex*dt/me*mm
           vey_n=vey[-1]+dt*self.aesy+dt*self.aejy-self.amey*dt/me*mm
           vjx_n=vjx[-1]+dt*self.ajsx-dt*self.aejx/mj*me
           vjy_n=vjy[-1]+dt*self.ajsy-dt*self.aejy/mj*me
           vmx_n=vmx[-1]+dt*self.amsx+dt*self.amex+vex[-1]
           vmy_n=vmy[-1]+dt*self.amsy+dt*self.amey+vey[-1]
           vex.append(vex_n)
           vey.append(vey_n)
           vjx.append(vjx_n)
           vjy.append(vjy_n)
           vmx.append(vmx_n)
           vmy.append(vmy_n)
           xe_n=xe[-1]+dt*vex[-1]
           xj_n=xj[-1]+dt*vjx[-1]
           ye_n=ye[-1]+dt*vey[-1]
           yj_n=yj[-1]+dt*vjy[-1]
           xm_n=xm[-1]+dt*vmx[-1]
           ym_n=ym[-1]+dt*vmy[-1]
           xe.append(xe_n)
           ye.append(ye_n)
           xj.append(xj_n)
           yj.append(yj_n)
           xm.append(xm_n)
           ym.append(ym_n)
           xej=xe[-1]-xj[-1]
           yej=ye[-1]-yj[-1]
           rej_n=sqrt(xej**2+yej**2)
           rej.append(rej_n)
           xem_=xe[-1]-xm[-1]
           yem_=ye[-1]-ym[-1]
           rem_n=sqrt(xem_**2+yem_**2)
           rem.append(rem_n)
           re_n=sqrt(xe[-1]**2+ye[-1]**2)
           rj_n=sqrt(xj[-1]**2+yj[-1]**2)
           rm_n=sqrt(xm[-1]**2+ym[-1]**2)
           re.append(re_n)
           rj.append(rj_n)
           rm.append(rm_n)
           t.append(t[-1]+dt)
       return xe,ye,xj,yj,xm,ym
